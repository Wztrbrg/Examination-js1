// H√§r skapar vi referenser till alla element i startmenyn
const startBtn = document.querySelector(".start-btn");
const backBtn = document.querySelector(".back-btn");
const startGameBtn = document.querySelector(".start-game-btn");
const startMenu = document.querySelector(".start-menu");
const playerMenu = document.querySelector(".player-menu");
const gameDisplay = document.querySelector(".game-display");
const firstPlayerName = document.querySelector(".first-player-name");
const secondPlayerName = document.querySelector(".second-player-name");
const player1 = document.querySelector(".player1");
const player2 = document.querySelector(".player2");

// H√§r skapas ett objekt som samlar alla viktiga variablar som anv√§nds i spelet

const gameState = {
  gameStarted: false,
  cardsFlipped: 0, // cardsFlipped h√•ller koll p√• om man anv√§ndaren tar sitt f√∂rsta eller sitt andra kort
  playerTurn: 0, // playerTurn v√§xlar mellan 0 och 1, 0 √§r playerOne och 1 √§r playerTwo.
  playerOneScore: 0,
  playerTwoScore: 0,
  currentlyFlipped: false,

  playerOneName: "Spelare 1",
  playerTwoName: "Spelare 2",

  history: "",
};

/*
Dom h√§r tre funktionerna nedan triggas av knapparna i startmenyn, vi √§ndrar bara visibility p√• menyerna
f√∂r att kunna g√• fram och tillbaka.
 */

const startClick = () => {
  startMenu.style.visibility = "hidden";
  playerMenu.style.visibility = "visible";
};

startBtn.addEventListener("click", startClick);

const backClick = () => {
  startMenu.style.visibility = "visible";
  gameDisplay.style.visibility = "hidden";
  playerMenu.style.visibility = "hidden";
};

backBtn.addEventListener("click", backClick);

// Det h√§r √§r sista knappen som drar ig√•ng spelet

const startGameClick = () => {
  playerMenu.style.visibility = "hidden";
  gameDisplay.style.visibility = "visible";

  gameState.playerOneName = player1.value;
  gameState.playerTwoName = player2.value;

  console.log(gameState.playerOneName);

  // H√ÑR STARTAR SPEL LOGIKEN
  createCards();
};

startGameBtn.addEventListener("click", startGameClick);

/*
Hela spellogiken h√§r nere 
*/

// B√∂rjar med att g√∂ra lite referenser till olika containers

const cardContainer = document.querySelector(".card-container");
const playerTurnText = document.querySelector(".player-turn-text");
const playerOneScoreText = document.querySelector(".player-one-score");
const playerTwoScoreText = document.querySelector(".player-two-score");
const playerOneNameLabel = document.querySelector(".player-one-name-label");
const playerTwoNameLabel = document.querySelector(".player-two-name-label");
const winnerText = document.querySelector(".winner-text");
const resultLabel = document.querySelector(".result-label");
const historyContainer = document.querySelector(".history");

let firstCard, secondCard, firstCardSymbol, secondCardSymbol;

// H√§r skapar vi en array med symboler, det √§r dom h√§r symbolerna som blir p√• korten.
let symbols = [
  "‚ú®",
  "‚ù§Ô∏è",
  "üéÑ",
  "üòÇ",
  "üî•",
  "üéÖ",
  "üíÄ",
  "üéâ",
  "ü•≥",
  "‚ùÑÔ∏è",
  "üëÄ",
  "üéÅ",
];
// Duplicera hela arrayen s√• man f√•r 2 av varje (det ska ju vara 2 kort)
symbols.forEach((e) => symbols.push(e));

// H√§r slumpar vi arrayen med korten s√• dom hamnar p√• olika platser, detta k√∂rs varje g√•ng spelet startar eller startas om.
function randomizeSymbolArray(array) {
  // Tar varje item i arrayen och stoppar in det p√• en random plats.
  for (let i = array.length - 1; i > 0; i--) {
    let j = Math.floor(Math.random() * (i + 1));
    let temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }
  return array;
}

function createCards() {
  //B√∂rja med att ta bort befintliga kort och resetta alla po√§ng s√• det b√∂rjar fr√•n b√∂rjan.
  deleteAllCards();
  gameState.history = ""; // Detta tar bort historiken f√∂r alla drag som gjorts
  symbols = randomizeSymbolArray(symbols); // Randomizar arrayen...
  /* resettar score */
  gameState.playerOneScore = 0;
  gameState.playerTwoScore = 0;
  gameState.cardsFlipped = 0;

  winnerText.style.display = "none"; // D√∂ljer texten som visas i slutet n√§r man vinner
  playerTurnText.style.display = "block"; // G√∂r playerTurn texten synlig, (den blir dold n√§r matchen √§r √∂ver)
  updateGraphics();

  // Nu b√∂rjar kortet skapas
  // H√§r loopar vi igenom v√•ran symbol array och skapar upp en div med en bak och framsida med alla klasserna som beh√∂vs
  for (let i = 0; i < symbols.length; i++) {
    card = document.createElement("div");

    front = document.createElement("div");
    back = document.createElement("div");
    front.classList.add("front");
    back.classList.add("back");

    back.innerText = symbols[i]; // H√§r s√§tter vi symbolen p√• kortet
    card.classList.add("card");

    cardContainer.append(card); // H√§r s√§tts kortet ut i DOMen
    card.append(front, back);

    card.addEventListener("click", (e) => {
      // H√§r l√§gger vi p√• en EventListener p√• varje kort s√• vi kan ta emot klick eventet, allts√• vad som ska h√§nda n√§r man trycker p√• kortet
      flipCard(e, symbols[i]); // dvs denna funktion k√∂rs n√§r man trycker p√• varje kort.
      // Attributen e, √§r sj√§lva kortobjektet som blir tryckt p√•, attributen symbols[i] √§r enbart symbolen/emojin.
      // Kortobjektet (e) tar vi med f√∂r d√• kan vi manipulera det senare i koden, allts√• l√§gga p√• flip klassen osv.
    });
  }
}

function addPoint() {
  //H√§r kollar vi vilkens spelare tur det var och ger sedan po√§ng till r√§tt spelare
  if (gameState.playerTurn == 0) {
    gameState.playerOneScore += 1;
  } else if (gameState.playerTurn == 1) {
    gameState.playerTwoScore += 1;
  }
}

function updateGraphics() {
  // Denna funktion k√∂rs r√§tt ofta och anv√§nds f√∂r att uppdatera DOMen n√§r po√§ng, speltur och historik √§ndras.
  if (gameState.playerTurn == 0) {
    playerTurnText.innerText = gameState.playerOneName + "'s tur";
  } else {
    playerTurnText.innerText = gameState.playerTwoName + "'s tur";
  }
  playerOneNameLabel.innerText = gameState.playerOneName + ": ";
  playerTwoNameLabel.innerText = gameState.playerTwoName + ": ";
  playerOneScoreText.innerText = gameState.playerOneScore;
  playerTwoScoreText.innerText = gameState.playerTwoScore;
  historyContainer.innerHTML = gameState.history;
}

function updateHistory() {
  // H√§r uppdateras historiken, detta k√∂rs bara om n√•gon har tagit 2 matchande kort.
  // F√∂rst kollar vi vilken spelares tur det √§r och sen l√§gger vi till text i historyContainer som s√§ger att spelaren har hittat ett par
  if (gameState.playerTurn == 0) {
    // Spelare 1
    gameState.history +=
      "<p> " +
      gameState.playerOneName +
      " hittade " +
      firstCardSymbol +
      " </p>";
    historyContainer.innerHTML = gameState.history;
  } else {
    // Spelare 2...
    gameState.history +=
      "<p> " +
      gameState.playerTwoName +
      " hittade " +
      firstCardSymbol +
      " </p>";
    historyContainer.innerHTML = gameState.history;
  }

  console.log(history);
}

// Exit knappen inne i spelet
function exit() {
  createCards(); // Resettar alla po√§ng och kort

  startMenu.style.visibility = "visible";
  gameDisplay.style.visibility = "hidden"; // Tar en tillbaka till start menyn, d√∂ljer sj√§lva spelplanen
  playerMenu.style.visibility = "hidden";
}

// H√§r kollar vi om de 2 korten som plockats upp matchar!
function checkIfCardsMatch() {
  if (firstCardSymbol == secondCardSymbol) {
    //Detta k√∂rs om b√•da korten matchar varandra

    console.log("Korten matchade!");
    addPoint(); // Ge po√§ng till r√§tt spelaren
    updateGraphics(); // Updatera grafiken s√• po√§ngen som visas st√§mmer
    updateHistory(); // Uppdatera historiken p√• sidan
    firstCard.classList.add("correct"); // H√§r ger vi b√•da korten klassen "correct" som g√∂r korten gr√∂na
    secondCard.classList.add("correct");
    setTimeout(() => {
      // Efter en sekund s√• l√§ggs klass "hide" p√• korten, d√• f√∂rsvinner dom. Korten tas inte bort helt utan dom blir bara osynliga.
      firstCard.classList.add("hide");
      secondCard.classList.add("hide");
      checkIfGameEnded(); // Kolla sedan om det var dom sista korten s√• matchen kan ta slut.
    }, 1000);
  } else {
    // Detta k√∂rs om korten inte matchade varandra
    console.log("Korten matchade inte");
    gameState.playerTurn = 1 - gameState.playerTurn; // √Ñndrar till andra spelarens tur
    updateGraphics(); //uppdatera grafiken
  }
}

// H√§r kollar vi bara hur m√•nga kort som finns kvar p√• bordet, ger tillbaka ett nummer.
function checkCardsLeft() {
  let cardsLeft = 0;
  let allCards = document.querySelectorAll(".card");
  for (let i = 0; i < allCards.length; i++) {
    // Loopar igenom alla kort
    if (!allCards[i].classList.contains("hide")) {
      cardsLeft += 1;
    }
  }
  return cardsLeft;
}

// H√§r kollar vi om matchen har tagit slut, k√∂rs varje g√•ng n√•n tar upp matchande kort.
function checkIfGameEnded() {
  const playerNameLabel = document.querySelector(".player-name-label");
  if (checkCardsLeft() == 0) {
    // Kolla om det √§r 0 kort kvar, om det √§r 0 kort kvar s√• har matchen tagit slut
    if (gameState.playerOneScore > gameState.playerTwoScore) {
      //Spelare ett vann
      playerNameLabel.innerText = gameState.playerOneName;
      resultLabel.innerText = " vann!üéâ";
    } else if (gameState.playerTwoScore > gameState.playerOneScore) {
      //Spelare tv√• vann
      playerNameLabel.innerText = gameState.playerTwoName;
      resultLabel.innerText = " vann!üéâ";
    } else {
      // B√•da fick lika mycket po√§ng
      playerNameLabel.innerText = "";
      resultLabel.innerHTML = "Oavgjort!";
      console.log("Tie!");
    }
    // Ta sedan bort alla kort s√• vi kan skapa nya p√• nya platser.
    deleteAllCards();
    winnerText.style.display = "block"; // G√∂r vinnar texten synlig
    playerTurnText.innerText = ""; // D√∂ljer speltur texten
  }
}

// Denna funktion loopar igenom alla kort och tar sedan bort dom helt.
function deleteAllCards() {
  let allCards = document.querySelectorAll(".card");
  for (let i = 0; i < allCards.length; i++) {
    allCards[i].remove();
  }
}

function flipBackCards() {
  // V√§nd tillbaka alla kort med klassen flip
  let allFlippedCards = document.querySelectorAll(".flip");
  allFlippedCards.forEach((card) => card.classList.toggle("flip"));
  gameState.currentlyFlipped = false; // Denna blir till false n√§r alla kort √§r tillbaka v√§nda, anv√§nds i if-satsen i flipCard nedan.
}

function flipCard(card, symbol) {
  if (
    !gameState.currentlyFlipped &&
    !card.currentTarget.classList.contains("hide")
  ) {
    //If-sats som f√∂rhindrar spelaren att √∂ppna flera kort medans 2 redan √§r v√§nda, eller √∂ppna ett kort som redan har blivit hittat.
    card = card.currentTarget;
    card.classList.add("flip"); //L√§gger till styling-classen flip p√• kortet som tryckts p√•

    if (gameState.cardsFlipped == 0) {
      // Detta k√∂rs f√∂r f√∂rsta kortet
      //K√∂rs n√§r f√∂rsta kortet v√§ljs.

      firstCard = card;
      firstCardSymbol = symbol;
      gameState.cardsFlipped += 1; // Nu har ett kort v√§nts, d√• √∂kar vi cardsFlipped med 1, s√• n√§sta g√•ng vi trycker p√• ett kort s√• kommer det bli secondCard.
    } else if (card != firstCard) {
      // Detta k√∂rs f√∂r andra kortet som v√§ljs, kollar s√• man inte tryckt p√• samma kort som f√∂rsta.

      secondCard = card;
      secondCardSymbol = symbol;
      gameState.cardsFlipped = 0; // Nu har vi valt 2 kort, d√• s√§tter vi cardsflipped till 0 igen och b√∂rjar om.

      checkIfCardsMatch(); // Kolla om korten matchar!!

      //Flippa tillbaka alla kort s√• dom v√§nds tillbaka
      gameState.currentlyFlipped = true; // currentlyFlipped blir till true och f√∂rhindrar spelaren att ta flera kort tills dom som v√§nts har blivit tillbaka v√§nda.
      setTimeout(flipBackCards, 1000); // V√§nta en sekund med att flippa tillbaka korten, s√• spelaren hinner se vilka kort dom tryckt p√•.
    }
  }
}
